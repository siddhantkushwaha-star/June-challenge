GFG : koko eating bananas

Koko Eating Bananas
Difficulty: MediumAccuracy: 50.27%Submissions: 33K+Points: 4Average Time: 20m
Koko is given an array arr[], where each element represents a pile of bananas. She has exactly k hours to eat all the bananas.

Each hour, Koko can choose one pile and eat up to s bananas from it.

If the pile has atleast s bananas, she eats exactly s bananas.

If the pile has fewer than s bananas, she eats the entire pile in that hour.

Koko can only eat from one pile per hour.


Your task is to find the minimum value of s (bananas per hour) such that Koko can finish all the piles within k hours.

Examples:

Input: arr[] = [5, 10, 3], k = 4
Output: 5
Explanation: Koko eats at least 5 bananas per hour to finish all piles within 4 hours, as she can consume each pile in 1 + 2 + 1 = 4 hours.
Input: arr[] = [5, 10, 15, 20], k = 7
Output: 10 
Explanation: At 10 bananas per hour, Koko finishes in 6 hours, just within the limit 7.
Constraint:
1 ≤ arr.size() ≤ 105 
1 ≤ arr[i] ≤ 106
arr.size() ≤ k ≤ 106


Solution   : 


class Solution {
    public int kokoEat(int[] arr, int k) {
        // code here
        int low = 1;
        int high = 0;

        // Get the maximum pile size
        for (int bananas : arr) {
            high = Math.max(high, bananas);
        }

        int ans = high;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (canEatAll(arr, mid, k)) {
                ans = mid;      // Try to find a smaller valid speed
                high = mid - 1;
            } else {
                low = mid + 1;  // Need to eat faster
            }
        }

        return ans;
    }

    // Check if Koko can eat all bananas at speed s within k hours
    private boolean canEatAll(int[] arr, int s, int k) {
        int totalHours = 0;
        for (int bananas : arr) {
            // Use ceiling of bananas/s = (bananas + s - 1) / s
            totalHours += (bananas + s - 1) / s;
        }
        return totalHours <= k;
    }
}
