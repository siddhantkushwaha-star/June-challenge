GFG : Symmetric Tree


Given the root of a binary tree, check whether it is symmetric, i.e., whether the tree is a mirror image of itself.


A binary tree is symmetric if the left subtree is a mirror reflection of the right subtree.

Examples:

Input: root[] = [1, 2, 2, 3, 4, 4, 3]
   ex-1_1
Output: True
Explanation: As the left and right half of the above tree is mirror image, tree is symmetric.
Input: root[] = [1, 2, 2, N, 3, N, 3]
   ex-2_1
Output: False
Explanation:  As the left and right half of the above tree is not the mirror image, tree is not symmetric. 
Constraints:
1  ≤ number of nodes ≤ 2000


Solution : 


/*
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}

*/
class Solution {
    public boolean isSymmetric(Node root) {
        // Code here
        
 return isMirror(root.left, root.right);
    }

    private boolean isMirror(Node left, Node right) {
        // Both null means mirror
        if (left == null && right == null) return true;

        // One null and one not means not mirror
        if (left == null || right == null) return false;

        // Data must be same and subtrees must be mirrors
        return (left.data == right.data) &&
               isMirror(left.left, right.right) &&
               isMirror(left.right, right.left);

}
}
